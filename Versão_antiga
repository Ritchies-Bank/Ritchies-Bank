#include <stdio.h>
#include <stdlib.h>
#include <conio.h>
#include <string.h>
#include <time.h>
#include <windows.h>
#include <ctype.h>
#define MAX 100
#define EM 3

//string para o arquivo principal
char* arquivo = "cadastros.txt";

//strins para a verificação de email
char emails[EM][MAX]={"@gmail.com","@hotmail.com","@outlook.com"};

//Definição da struct Tempo
typedef struct Tempo{
	int dia, mes, ano;
	int hora, min;
}Tempo;

//Definição de struct Cadastro
typedef struct Cadastro{
	char nome[MAX];
	char senha[MAX];
	char cpf[12];
	char email[MAX];
	int num_conta;
	double saldo;
	Tempo data;
}Cad;

//Declaração de funções
void menu(FILE*);
void cadastrar(FILE*);
void administrador(FILE*);
void conta(FILE*);
void atualizar(FILE*, int);
void excluir(FILE*, int);
int conta_existente(FILE*, Cad);
int conta_inexistente(FILE*, Cad);
int cpf_existente(FILE*, Cad);
int senha_correta(char const*, char const*);
int isletter (char);
int verifica_nome(char[]);
int verifica_cpf(char[]);
void data_hora(Tempo*);
void le_senha(char[],Cad,int);
int verifica_email(const char[]);
void verifica_saldo(double*);
void escolhe_conta(Cad);
void gotoxy(int,int);

int main() {
	//ponteiro para arquivo
	FILE *file;
	
	//abre arquivo. Se ouver erro, fecha programa
	if((file = fopen(arquivo, "ab")) == NULL) {
		printf("Erro ao abrir o arquivo");
		return 1;
	}
	
	fclose(file);
	
	//chama menu()
	menu(file);
	
	return 0;
}

void menu(FILE* file) {
	int op;
	
	do {
		printf("Opcoes:\n\n");
		printf("(1)Conta\n(2)Cadastrar\n(3)Administrador\n(0)Sair\n\n");
		printf("Escolha: ");
		scanf("%d", &op);
		
		system("cls");
		
		switch(op) {
			case 1: conta(file); break;
			case 2: cadastrar(file); break;
		//	case 3: administrador(file); break;
			case 0: return;
			default: system("cls");
		}
	}while(1);
}

void cadastrar(FILE *file) {
	char auxiliar[MAX]; //para ler o saldo
	
	//Estrutura a ser gravada
	Cad cad = {"", "", "", "", 0, 0.0, {0, 0, 0, 0, 0}};
	int aux;
	
	//Abre arquivo. Se houver erro, fecha programa
	if((file = fopen(arquivo, "rb+")) == NULL) {
		printf("Erro ao reabrir arquivo");
		exit(1);
	}
	
	erro:
	printf("Digite o numero da conta (1 - 100): ");
	scanf("%d",&cad.num_conta);
	if(cad.num_conta < 1) {
		system("cls");
		goto erro;
	}
	
	if(conta_existente(file, cad)) {
		printf("Essa conta ja existe!\n");
		getche();
		system("cls");
		goto erro;
	}
	
	aux = cad.num_conta;
	
	//usa fseek para mover ponteiro para o registro desejado
	fseek(file, (aux - 1) * sizeof(Cad), SEEK_SET);
	
	//faz cadastro
	fflush(stdin);
	printf("Digite o nome: ");
	fgets(cad.nome, MAX, stdin);
	fflush(stdin);
	
	while(verifica_nome(cad.nome)==-1){
		printf ("Digite o nome novamente: ");
		fgets(cad.nome, MAX, stdin);
		fflush(stdin);
	}

	system("cls");
	printf ("Nome: %s",cad.nome);
	
	printf("Digite cpf: ");
	fflush(stdin);
	fgets(cad.cpf, MAX, stdin);
	fflush(stdin);
	
	erro_cpf:
	
	while(verifica_cpf(cad.cpf)==-1){
		printf ("Digite um cpf valido: ");
		fgets(cad.cpf, MAX, stdin);
		fflush(stdin);
	}
	
		
	if(cpf_existente(file, cad)) {
		printf("Esse cpf ja esta cadastrado!\n");
		printf ("Insira novamente: ");
		fgets(cad.cpf, MAX, stdin);
		fflush(stdin);
		goto erro_cpf;
	}
	
	system("cls");
	printf ("Nome: %s",cad.nome);
	printf ("Cpf: %s",cad.cpf);
	
	printf ("Digite um email: ");
	fgets(cad.email,MAX,stdin);
	fflush(stdin);
	
	while(verifica_email(cad.email)==-1){
		fflush(stdin);
		system("cls");
		printf("Nome: %s", cad.nome);
		printf("Cpf: %s", cad.cpf);
		printf ("Digite um email valido: ");
		fgets(cad.email,MAX,stdin);
		fflush(stdin);	
	}
	
	system("cls");
		
	le_senha(cad.senha,cad,1);	
	
	printf ("\nSaldo: ");
	verifica_saldo(&cad.saldo);
	
	escolhe_conta(cad);
	
	//obtêm data e hora do cadastro do cadastro
	data_hora(&cad.data);
	
	//grava estrutura
	fwrite(&cad, sizeof(Cad), 1, file);
	
	//fecha arquivo
	fclose(file);
	
	getche();
	system("cls");
}

void conta(FILE *file) {
	
	int op;
	
	//Variável para a senha
	char senha[MAX];
	
	//Estrutura a ser lida
	Cad cad = {"", "", "", 0, 0.0};
	
	//Abre arquivo. Se houver erro, fecha programa
	if((file = fopen(arquivo, "rb+")) == NULL) {
		printf("Erro ao reabrir arquivo");
		exit(1);
	}
	
	erro:
	printf("Digite o numero da conta: ");
	scanf("%d", &cad.num_conta);
	if(cad.num_conta < 1) {
		system("cls");
		goto erro;
	}
	
	if(conta_inexistente(file, cad)) {
		printf("Essa conta nao existe!\n");
		getche();
		system("cls");
		goto erro;
	}	
	
	//usa fseek para mover ponteiro para o registro desejado
	fseek(file, (cad.num_conta - 1) * sizeof(Cad), SEEK_SET);

	//le registro
	fread(&cad, sizeof(Cad), 1, file);
	
	erro_senha:
	fflush(stdin);
	printf("Digite a senha: ");
	fgets(senha, MAX, stdin);
	
	if(senha_correta(senha, cad.senha)) {
		//imprime dados
		printf("\nDados:\n");
		printf("Nome: %s", cad.nome);
		printf("Cpf: %s", cad.cpf);
		printf("Email: %s", cad.email);
		printf("Saldo: %.2lf\n", cad.saldo);
		printf("Senha: %s\n", cad.senha);
		printf("Cadastrou em: %d/%d/%d as %d:%d\n\n", cad.data.dia, cad.data.mes, cad.data.ano, cad.data.hora, cad.data.min);
	} else {
		printf("Senha incorreta!\n");
		getche();
		system("cls");
		printf("Digite o numero da conta: %d\n", cad.num_conta);
		goto erro_senha;
	}
	
	//fecha arquivo
	fclose(file);
	
	do {
		printf("Opcoes:\n\n");
		printf("(1)Atualizar conta\n(2)Excluir conta\n(0)Voltar\n\n");
		printf("Escolha: ");
		scanf("%d", &op);
		
		system("cls");
		
		switch(op) {
			case 1: atualizar(file, cad.num_conta); break;
			case 2: excluir(file, cad.num_conta); return;
			case 0: system("cls"); return;
			default: system("cls");
		}
	}while(1);
	
	getche();
	system("cls");	
}

void atualizar(FILE *file, int conta) {
	//Estrutura a ser gravada
	Cad cad = {"", "", "", "", 0, 0.0, {0, 0, 0, 0, 0}};
	char auxiliar[MAX];
	int aux;
	
	//Abre arquivo. Se houver erro, fecha programa
	if((file = fopen(arquivo, "rb+")) == NULL) {
		printf("Erro ao reabrir arquivo");
		exit(1);
	}
	
	//usa fseek para mover ponteiro para o registro desejado
	fseek(file, (conta - 1) * sizeof(Cad), SEEK_SET);
	
	//grava struct vazia
	fwrite(&cad, sizeof(Cad), 1, file);
	
	//abre arquivo
	fclose(file);
	
	//Abre arquivo. Se houver erro, fecha programa
	if((file = fopen(arquivo, "rb+")) == NULL) {
		printf("Erro ao reabrir arquivo");
		exit(1);
	}
	
	cad.num_conta = conta;
	
	//faz atualização
	fflush(stdin);
	printf("Digite o novo nome: ");
	fgets(cad.nome, MAX, stdin);
	fflush(stdin);
	
	while(verifica_nome(cad.nome)==-1){
		printf ("Digite o nome novamente: ");
		fgets(cad.nome, MAX, stdin);
		fflush(stdin);
	}

	system("cls");
	printf ("Nome: %s",cad.nome);
	
	printf("Digite novo cpf: ");
	fflush(stdin);
	fgets(cad.cpf, MAX, stdin);
	fflush(stdin);
	
	erro_cpf:
	
	while(verifica_cpf(cad.cpf)==-1){
		printf ("Digite um cpf valido: ");
		fgets(cad.cpf, MAX, stdin);
		fflush(stdin);
	}
	
		
	if(cpf_existente(file, cad)) {
		printf("Esse cpf ja esta cadastrado!\n");
		printf ("Insira novamente: ");
		fgets(cad.cpf, MAX, stdin);
		fflush(stdin);
		goto erro_cpf;
	}
	
	system("cls");
	printf ("Nome: %s",cad.nome);
	printf ("Cpf: %s",cad.cpf);
	
	printf ("Digite um novo email: ");
	fgets(cad.email,MAX,stdin);
	fflush(stdin);
	
	while(verifica_email(cad.email)==-1){
		printf ("Digite um email valido: ");
		fgets(cad.email,MAX,stdin);
		fflush(stdin);	
	}
	
	system("cls");
		
	le_senha(cad.senha,cad,1);	
	
	printf ("\nSaldo: ");
	verifica_saldo(&cad.saldo);
	
	escolhe_conta(cad);
	
	data_hora(&cad.data);
	
	//grava estrutura
	fwrite(&cad, sizeof(Cad), 1, file);
	
	//fecha arquivo
	fclose(file);
	
	puts("");
	system("pause");
	system("cls");
}

void excluir(FILE *file, int conta) {
	Cad* vetor;
	int tam = 0;
	int i = 0, j = 0;
	
	//Estrutura a ser gravada
	Cad cad;
	
	//Abre arquivo. Se houver erro, fecha programa
	if((file = fopen(arquivo, "rb+")) == NULL) {
		printf("Erro ao reabrir arquivo");
		exit(1);
	}
	
	//calcula quantidade de contas
	while((fread(&cad, sizeof(Cad), 1, file)) == 1) {
		tam++;
	}
	
	//aloca tamanho necessário para as contas
	vetor = (Cad*) calloc(tam, sizeof(Cad));
	
	//volta para a posição inicial do arquivo
	rewind(file);
	
	//guarda as estruturas em vetor dinamicamente alocado
	while((fread(&cad, sizeof(Cad), 1, file)) == 1) {
		if(cad.num_conta != conta) {  //não grava a struct que se deseja excluir
			vetor[i] = cad;
			i++;
		}
	}
	
	//fecha arquivo
	fclose(file);
	
	//Abre arquivo, em modo "wb", para apagar as informações anteriores. Se houver erro, fecha programa
	if((file = fopen(arquivo, "wb")) == NULL) {
		printf("Erro ao reabrir arquivo");
		exit(1);
	}
	
	//salva informações
	while(j < i) {
		fseek(file, (((vetor+j)->num_conta) - 1) * sizeof(Cad), SEEK_SET);
		fwrite(&vetor[j], sizeof(Cad), 1, file);
		j++;
	}
	
	//libera memória de vetor
	free(vetor);
	
	//fecha arquivo
	fclose(file);
	
	getche();
	system("cls");
}

int conta_existente(FILE* file, Cad cad) {
	
	//usa fseek para mover ponteiro para o registro desejado
	fseek(file, (cad.num_conta - 1) * sizeof(Cad), SEEK_SET);
	
	//lê dados
	fread(&cad, sizeof(Cad), 1, file);
	
	if(strcmp(cad.nome, "") != 0) {
		rewind(file);
		return 1;
	}
		
	else {
		rewind(file);
		return 0;
	}
}

int cpf_existente(FILE* file, Cad cad) {
	Cad aux;
	int i;
	
	rewind(file);
	
	while(!(feof(file))) {
		fread(&aux, sizeof(Cad), 1, file);
		
		i = strlen(cad.cpf);
		
		if(strncmp(cad.cpf, aux.cpf, i) == 0) {
			fseek(file, (cad.num_conta - 1) * sizeof(Cad), SEEK_SET);
			return 1;
		}
	}
	fseek(file, (cad.num_conta - 1) * sizeof(Cad), SEEK_SET);
	return 0;
}

int conta_inexistente(FILE* file, Cad cad) {
	
	//move ponteiro para a posição desejada
	fseek(file, (cad.num_conta-1) * sizeof(Cad), SEEK_SET);
	
	fread(&cad, sizeof(Cad), 1, file);
	
	rewind(file);
	
	if(strcmp(cad.nome, "") == 0) {
		return 1;
	} else {
		return 0;
	}
}

int senha_correta(char const* senha1, char const* senha2) {
	
	int i = strlen(senha2);
	
	if(strncmp(senha1, senha2, i) == 0)
		return 1;
	else
		return 0;
}

void data_hora(Tempo* data) {
	struct tm *temp;
	
	time_t t;
	
	t=time(NULL);
	temp = localtime(&t);
	
	data->dia = temp->tm_mday;
	data->mes = temp->tm_mon+1;
	data->ano = temp->tm_year+1900;
	data->hora = temp->tm_hour;
	data->min = temp->tm_min;
}

int isletter (char n1){
	if (isalpha(n1))
		return 1;

	else{
		switch (n1){
			case -96: return 1; //á
			case -126: return 1; //é
			case -58: return 1; //ã
			case -112: return 1; //É
			case -57: return 1; //Ã
			case -75: return 1; //Á
			case -93: return 1; //ú
			case -23: return 1; //Ú
			case -94: return 1; //ó
			case -32: return 1; //Ó
			case -121: return 1; //ç
			case 32: return 1; //" "
			default: return 0;
		}
	}
}

int verifica_nome(char n1[]){
    int a;

	if(n1[0] == 32 || n1[0] == 10)
		return -1;

    for (a=0;a<strlen(n1)-1;a++){
        if ((!isletter(n1[a])))
            return -1;
    }

    return 1;
}

int verifica_cpf(char n1[]){
	char aux[1]; //String de 1 porque atoi nao converte caracter unico
	int a,b;
    int soma=0;

    if (strlen(n1)-1!=11) //verifica se o valor inserido tem 11 caracteres
        return -1;

    //verifica se todos os caracteres sao digitos
    for (a=0;a<11;a++){
        if (!isdigit(n1[a]))
            return -1;
    }

    //realiza o calculo de verificacao do primeiro digito verificador
    for (a=0,b=10;a<9;a++,b--){
        aux[0]=n1[a];

        soma+=b*atoi(aux);
    }
    aux[0]=n1[9];

    if (soma*10%11!=atoi(aux)){
        if (soma*10%11==10){
            if (n1[9]!='0')
                return -1;
        }
    }
    //verificacao para o segundo digito
    soma=0;
    for (a=0,b=11;a<10;a++,b--){
        aux[0]=n1[a];

        soma+=b*atoi(aux);
    }

    aux[0]=n1[10];

    if (soma*10%11!=atoi(aux)){
        if (soma*10%11==10){
            if (n1[10]!='0')
                return -1;
        }
    }

    return 1;
}

void le_senha(char n1[],Cad n2,int x){
	char ast[100]=" ", aux;
	int a=0;
	
	do{
		printf ("Nome: %s",n2.nome);
//		printf ("cpf: %s",n2.cpf);
		printf ("email: %s",n2.email);
		printf ("Senha: %s",ast);
		
		if (x==0)
			printf ("Senha invalida, insira novamente\n");
			
		aux=getch();
		
		if (aux!=8&&aux!=13){
			ast[a]='*';
			n1[a]=aux;
			a++;
		}
			
		if(aux==8){
			if(a>0){
				a--;
				ast[a]=' ';
			}
		}
		system("cls");
		
	}while(aux!=13);
	
	printf ("Nome: %s",n2.nome);
	printf ("cpf: %s",n2.cpf);
	printf ("email: %s",n2.email);
	printf ("Senha:%s",ast);
	
}


int verifica_email(const char n1[]){
	char term[MAX]="";
	int a,tam=strlen(n1)-1,b=0;	
	int aux=0;
	
	for (a=0;a<tam;a++){
		if (n1[a]=='@')
			aux=a;
	}
	
	for (a=0;a<tam;a++){
		if (a!=aux){
			if (!isdigit(n1[a])&&!isalpha(n1[a])&&n1[a]!='.')
				return -1;
		}
	}
	
	for (a=aux;a<tam;a++,b++){
		term[b]=n1[a];
	}
	

	for (a=0;a<EM;a++){
		if (strcmp(term,emails[a])==0)
			return 1;
	}
	
	return -1;
}

void verifica_saldo(double* num) {
	
	char s[310];
	int tam, cont = 0, cont_virgulas = 0;
	int i, x = 0;
	
	fgets(s, 310, stdin);
	
	tam = strlen(s) - 1;
	
	for(i = 0; i < tam; i++) {
		
		if(isdigit(s[i]) == 0 && cont_virgulas == 0) {
			
			if(s[i] == ',') {
				
				cont_virgulas++;
				s[i] = '.';
				
			}else
			      if(s[i] != 46) {
			      	
			      	cont++;
			      	
			      }
		}else
			if(isdigit(s[i]) == 0 && cont_virgulas > 0) {
				
				if(s[i] == ',') {
					
					cont++;
				}
			}
		    
	}
	
	while(cont > 0) {
		
		cont = 0;
		
		x = 0;
		
		system("cls");
		
		printf("Valor invalido!\n\n");
		
		getche();
		
		system("cls");
		
		printf("Digite o valor novamente: ");
		
		fgets(s, 310, stdin);
		
		tam = strlen(s) - 1;
		
		for(i = 0; i < tam; i++) {
			
			if(isdigit(s[i]) == 0 && cont_virgulas == 0) {
			
			if(s[i] == ',') {
				
				cont_virgulas++;
				s[i] = '.';
				
			}else
			      if(s[i] != 46) {
			      	
			      	cont++;
			      	
			      }
		}else
			if(isdigit(s[i]) == 0 && cont_virgulas > 0) {
				
				if(s[i] == ',') {
					
					cont++;
				}
			}
		        
	        }
	        
	 }
		
		*num = atof(s);
}

void gotoxy(int x, int y){
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE),(COORD){x-1,y-1});
}

void escolhe_conta(Cad n2){
	
	int opc;
	int a=8;
	int i;
	
	do{
		
		system ("cls");
		printf ("Nome: %s",n2.nome);
		printf ("cpf: %s",n2.cpf);
		printf ("Email: %s",n2.email);
		printf ("Senha: ");
		
		for (i=0;i<strlen(n2.senha);i++)
			printf ("*");
		
		printf ("\nSaldo: %f",n2.saldo);
		gotoxy(4,8);
		printf ("Conta corrente");
		gotoxy(4,9);
		printf ("Conta popan%ca",135);
	
		gotoxy(2,a);
		printf ("->");

		opc=getch();
		
		if (opc==80){
			if (a==8)
				a=9;
			
			else
				a=8;	
		}
		
		if (opc==72){
			if (a==9)
				a=8;
		}
		
	}while(opc!=13);
	
}
