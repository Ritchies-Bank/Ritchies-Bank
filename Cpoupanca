#include <stdio.h>
#include <stdlib.h>
#include <conio.h>
#include <string.h>
#include <time.h>
#include <windows.h>
#include <ctype.h>
#include <math.h>
#define MAX 100

#define PRETO  0
#define AZUL 1
#define VERDE 2
#define VERDE_AZULADO 3
#define VERMELHO 4
#define ROXO 5
#define AMARELO 6
#define BRANCO 7
#define CINZA 8
#define AZUL_CLARO 9
#define VERDE_CLARO 10
#define VERDE_MARINHO 11
#define VERMELHO_CLARO 12
#define LILAC 13
#define AMARELO_CLARO 14
#define BRANCO_CLARO 15

#define CIMA 72
#define BAIXO 80
#define ENTER 13
#define ESQUERDA 75
#define DIREITA 77
#define ESC 27

typedef struct Tempo{
	int dia, mes, ano;
	int hora, min;
}Tempo;

//Definição da struct Extrato
typedef struct Extrato {
	double valor;
	Tempo data; //data da movimentação
	int id;
	int conta; //número da conta a que foi feita a transferência
	int num_conta; //número da conta do dono do extrato
	char nome[MAX]; //nome do destinatário da transferência
}Extrato;

//Definição da struct Emprestimo
typedef struct Emprestimo {
	Tempo data;
	double valor; //valor do empréstimo
	double parcela; //valor da parcela
	int periodo; //periodo em meses para pagar o empréstimo
	int totalPagas; //total de parcelas pagas;
}Emprestimo;

//Definição de struct Cadastro
typedef struct Cadastro{
	char nome[MAX];
	char senha[MAX];
	char cpf[12];
	char rg[14];
	char email[MAX];
	int num_conta;
	double saldo;
	Tempo data;
	Tempo last_extrato;
	Tempo last_date; //para o cálculo do rendimento da poupança
	Extrato extratos; //uma estrutura de dados para os extratos
	Emprestimo emp; //estrutura de dados para o empréstimo
	int extr; //número de extratos
	int transf; //número de transferências
	int saques;	//número de saques
	int dep; //número de depósitos
	int total; //total de movimentações na conta
	int tipo; //tipo de conta: 0 - poupança, 1 - corrente
	int emprt; //número de empréstimos
}Cad;

//variável externa globaç
char *arquivo, *arquivo2;

void TransPoupanca(FILE*, Cad*);
double j_simples(double, double, int);
void rendimento(Cad*);
void data_hora(Tempo*);
int CalculoTempo(Tempo, Tempo);

//variaveis globais
int x, y;

void TransPoupanca(FILE* file, Cad* cad) {
	if((file = fopen(arquivo2, "rb+")) == NULL) {
		quadrado_menor();
		x = 46; y = 20; gotoxy(x, y);
		textcolor(VERMELHO_CLARO);
		printf("Erro ao reabrir arquivo");
		return;
	}
	
	Cad cad2;
	Extrato extr;
	Tempo aux, aux2;
	
	data_hora(&aux2); //obtêm data atual
	
	while((fread(&extr,sizeof(Extrato),1,file))) {
		if(extr.num_conta == cad->num_conta) {
			aux = extr.data;
			if(extr.id == 1) {
				if(CalculoTempo(aux, aux2) >= 30) {
					cad->saques = 0; //zera número de saques
				}
			} else {
				if(extr.id == 3) {
					if(CalculoTempo(aux, aux2) >= 30) {
						cad->transf = 0; //zera número de tranferências
					} 
				} 
			}
		}
	}
	
	data_hora(&(cad2.data));
	
	if(CalculoTempo(cad->last_extrato, cad2.data) >= 30)
		cad->extr = 0;
	
	fclose(file);
}

double j_simples(double valor, double juros, int tempo) {
	return ((valor) * (1 + (juros) * (tempo)));
}

void rendimento(Cad* cad) {
	int qtdMes = 0;
	Tempo atual;
	
	data_hora(&atual);
	
	qtdMes = (CalculoTempo(cad->last_date, atual))/30;
	
	
	cad->saldo = j_simples(cad->saldo, 0.05, qtdMes);
	
	data_hora(&(cad->last_date));
}
